'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'

type HealthData = {
  day: number
  heartRate: number
  bloodPressure: number
  steps: number
  sleep: number
  calories: number
  stressLevel: number
}

export default function Health() {
  const [healthData, setHealthData] = useState<HealthData[]>([])
  const [selectedMetric, setSelectedMetric] = useState<keyof HealthData>('heartRate')

  const generateHealthData = (): HealthData[] => {
    return Array.from({ length: 7 }, (_, i) => ({
      day: i + 1,
      heartRate: Math.floor(Math.random() * (100 - 60) + 60),
      bloodPressure: Math.floor(Math.random() * (140 - 110) + 110),
      steps: Math.floor(Math.random() * (15000 - 5000) + 5000),
      sleep: Math.floor(Math.random() * (10 - 5) + 5),
      calories: Math.floor(Math.random() * (3000 - 1500) + 1500),
      stressLevel: Math.floor(Math.random() * 100),
    }))
  }

  useEffect(() => {
    setHealthData(generateHealthData())
  }, [])

  const refreshHealthData = () => {
    setHealthData(generateHealthData())
  }

  const getLatestData = () => healthData[healthData.length - 1] || {}

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-4">AI Health Dashboard</h1>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 mb-8">
        <Card>
          <CardHeader>
            <CardTitle>Heart Rate</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{getLatestData().heartRate} bpm</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Blood Pressure</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{getLatestData().bloodPressure}/80 mmHg</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Steps Today</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{getLatestData().steps?.toLocaleString()}</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Sleep</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{getLatestData().sleep}h</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Calories Burned</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{getLatestData().calories} kcal</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Stress Level</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{getLatestData().stressLevel}%</p>
          </CardContent>
        </Card>
      </div>
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Health Trends</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[400px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={healthData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="day" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey={selectedMetric} stroke="#8884d8" />
              </LineChart>
            </ResponsiveContainer>
          </div>
          <div className="flex flex-wrap gap-2 mt-4">
            <Button onClick={() => setSelectedMetric('heartRate')}>Heart Rate</Button>
            <Button onClick={() => setSelectedMetric('bloodPressure')}>Blood Pressure</Button>
            <Button onClick={() => setSelectedMetric('steps')}>Steps</Button>
            <Button onClick={() => setSelectedMetric('sleep')}>Sleep</Button>
            <Button onClick={() => setSelectedMetric('calories')}>Calories</Button>
            <Button onClick={() => setSelectedMetric('stressLevel')}>Stress Level</Button>
          </div>
        </CardContent>
      </Card>
      <Button onClick={refreshHealthData}>Refresh Data</Button>
    </div>
  )
}

